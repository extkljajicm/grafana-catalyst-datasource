name: Release (auto publish)

on:
  push:
    tags:
      - 'v*' # e.g., v1.0.6

permissions: read-all

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Set version from Git tag (package.json + optional plugin.json)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "Using tag version: $VERSION"

          npm version --no-git-tag-version "$VERSION"

          if [ -f plugin.json ]; then
            sudo apt-get update -y && sudo apt-get install -y jq
            jq --arg v "$VERSION" '.info.version=$v' plugin.json > plugin.json.tmp && mv plugin.json.tmp plugin.json
          else
            echo "plugin.json not found in repo root; relying on webpack substitution."
          fi

      - name: Install frontend deps
        run: npm ci

      - name: Build frontend (creates dist/ and dist/plugin.json)
        run: npm run build

      - name: Build backend binaries (Mage BuildAll via go run)
        run: go run github.com/magefile/mage -v BuildAll

      - name: Verify dist/ and extract plugin id
        id: meta
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
          test -f dist/plugin.json || { echo "dist/plugin.json missing"; ls -la dist || true; exit 1; }
          cat dist/plugin.json
          PLUGIN_ID=$(jq -r .id dist/plugin.json)
          VERSION=$(jq -r .info.version dist/plugin.json)
          echo "plugin-id=${PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Package zip
        run: |
          set -euo pipefail
          PLUGIN_ID="${{ steps.meta.outputs.plugin-id }}"
          VERSION="${{ steps.meta.outputs.plugin-version }}"
          echo "Packaging ${PLUGIN_ID}-${VERSION}.zip"
          mv dist "$PLUGIN_ID"
          zip -r "${PLUGIN_ID}-${VERSION}.zip" "$PLUGIN_ID"
          sha1sum "${PLUGIN_ID}-${VERSION}.zip" | cut -f1 -d' ' > "${PLUGIN_ID}-${VERSION}.zip.sha1"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false   # set to 'true' to create a draft instead
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: "Automated build for ${{ github.ref_name }}"
          files: |
            ${{ steps.meta.outputs.plugin-id }}-${{ steps.meta.outputs.plugin-version }}.zip
            ${{ steps.meta.outputs.plugin-id }}-${{ steps.meta.outputs.plugin-version }}.zip.sha1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
